// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (slug, description) 
VALUES ($1, $2)
RETURNING slug, description, created_at, updated_at
`

type CreateUserParams struct {
	Slug        string  `json:"slug"`
	Description *string `json:"description"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (User, error) {
	row := db.QueryRow(ctx, CreateUser, arg.Slug, arg.Description)
	var i User
	err := row.Scan(
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE slug = $1
`

func (q *Queries) DeleteUser(ctx context.Context, db DBTX, slug string) (pgconn.CommandTag, error) {
	return db.Exec(ctx, DeleteUser, slug)
}

const GetUser = `-- name: GetUser :one
SELECT slug, description, created_at, updated_at FROM users 
WHERE slug = $1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, slug string) (User, error) {
	row := db.QueryRow(ctx, GetUser, slug)
	var i User
	err := row.Scan(
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT slug, description, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context, db DBTX) ([]User, error) {
	rows, err := db.Query(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users 
SET 
  description = $2,
  updated_at  = now()
WHERE 
  slug = $1
RETURNING slug, description, created_at, updated_at
`

type UpdateUserParams struct {
	Slug        string  `json:"slug"`
	Description *string `json:"description"`
}

func (q *Queries) UpdateUser(ctx context.Context, db DBTX, arg UpdateUserParams) (User, error) {
	row := db.QueryRow(ctx, UpdateUser, arg.Slug, arg.Description)
	var i User
	err := row.Scan(
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
