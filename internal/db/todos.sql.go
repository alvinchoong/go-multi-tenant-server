// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: todos.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgconn"
)

const CreateTodo = `-- name: CreateTodo :one
INSERT INTO todos (title, description, user_slug) 
VALUES ($1,$2,$3)
RETURNING id, title, description, completed, user_slug, created_at, updated_at
`

type CreateTodoParams struct {
	Title       string  `json:"title"`
	Description *string `json:"description"`
	UserSlug    string  `json:"user_slug"`
}

func (q *Queries) CreateTodo(ctx context.Context, db DBTX, arg CreateTodoParams) (Todo, error) {
	row := db.QueryRow(ctx, CreateTodo, arg.Title, arg.Description, arg.UserSlug)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.UserSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteTodo = `-- name: DeleteTodo :execresult
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, db DBTX, id uuid.UUID) (pgconn.CommandTag, error) {
	return db.Exec(ctx, DeleteTodo, id)
}

const GetTodo = `-- name: GetTodo :one
SELECT id, title, description, completed, user_slug, created_at, updated_at FROM todos
WHERE id = $1
`

func (q *Queries) GetTodo(ctx context.Context, db DBTX, id uuid.UUID) (Todo, error) {
	row := db.QueryRow(ctx, GetTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.UserSlug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListTodos = `-- name: ListTodos :many
SELECT id, title, description, completed, user_slug, created_at, updated_at FROM todos
`

func (q *Queries) ListTodos(ctx context.Context, db DBTX) ([]Todo, error) {
	rows, err := db.Query(ctx, ListTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.UserSlug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTodo = `-- name: UpdateTodo :execresult
UPDATE todos SET 
  title = $2,
  description = $3,
  completed = $4
WHERE id = $1
`

type UpdateTodoParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	Completed   bool      `json:"completed"`
}

func (q *Queries) UpdateTodo(ctx context.Context, db DBTX, arg UpdateTodoParams) (pgconn.CommandTag, error) {
	return db.Exec(ctx, UpdateTodo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
	)
}
